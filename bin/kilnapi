#!/usr/bin/python

import logging, os, argparse
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop
from tornado.web import Application
from kilnapi.kilnapi_util import mkDir, forkIt
import kilnapi.handlers as handle
import ConfigParser

config = ConfigParser.ConfigParser()
config.read('/etc/kilnapi/kilnapi.conf')
port = config.get('defaults', 'port')
public_port = config.get('defaults', 'public_port')
certfile = config.get('defaults', 'certfile')
keyfile = config.get('defaults', 'keyfile')
logfile = config.get('defaults', 'logfile')

logfile_dir = os.path.dirname(logfile)
mkDir(logfile_dir)
filehandler = logging.FileHandler(
    filename = logfile, 
    mode = 'a', 
    encoding = None, 
    delay = False
)
filehandler.setLevel(logging.INFO)
if logging.root.level > filehandler.level:
    logging.root.setLevel = filehandler.level
logging.root.addHandler(filehandler)

parser = argparse.ArgumentParser(description='Kiln controller API daemon')
parser.add_argument('-d', '--daemon', help='run in the background',
                   action='store_true')
parser.add_argument('-f', '--foreground', help='run in the foreground',
                   action='store_true')
parser.add_argument('-P', '--pidfile', help='pid file for use with service script',
                   nargs='?')
args = vars(parser.parse_args())
pidfile = args['pidfile']

app = Application([
    (r"/help", handle.Help),
    (r"/kiln/tempf", handle.KilnTempF),
])

public_app = Application([
    (r"/help", handle.PubHelp),
])

def run_service():
    #http_server = HTTPServer(app, ssl_options={
    #    "certfile": certfile,
    #    "keyfile": keyfile,})
    http_server = HTTPServer(app)
    http_server.listen(port)
    pub_http_server = HTTPServer(public_app, ssl_options={
        "certfile": certfile,
        "keyfile": keyfile,})
    pub_http_server.listen(public_port)
    IOLoop.instance().start()

if __name__ == "__main__":
    if args['foreground']:
        run_service()
    elif args['daemon']:
        forkIt(run_service, pidfile)
    else:
        parser.print_help()

